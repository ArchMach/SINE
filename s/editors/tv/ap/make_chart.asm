
(documentation >doc>sm>make_chart.doc)

(variable blow_out)
(variable find_file)
(variable goto_buffer)
(variable print_msg)
(variable argument)
(variable current_buffer)
(variable editor_name)
(variable last_buffer_in)
(variable tg)
(variable replace)
(variable dispatch)
(variable M_dispatch)
(variable C-X_dispatch)

(defun make_chart (&aux make_chart_arg)
       (store argument make_chart_arg)
       (store 0 argument)
       (cond ((or (lp make_chart_arg 1) (gp make_chart_arg 6))
              (blow_out "Bad Argument")))
       (goto_buffer "CHART")
       (set_loc current_buffer 0)
       (delete current_buffer (length current_buffer))
       (insert editor_name current_buffer)
       (insert " Chart As Of " current_buffer)
       (insert (call_af "time") current_buffer)
       (insert 13 current_buffer)
       (make_chart_ dispatch (make_string "") make_chart_arg)
       (insert 12 current_buffer)
       (make_chart_ M_dispatch (make_string "Alt ") make_chart_arg)
       (insert 12 current_buffer)
       (make_chart_ C-X_dispatch (make_string "C-X ") make_chart_arg)
       (set_loc current_buffer 0)
       (print_msg (make_string "") 0))

(defun make_chart_ (dispatch_array prefix make_chart_arg &aux i fun string)
       (insert 13 current_buffer)
       (for i 0 127
            (insert prefix current_buffer)
            (make_chart_rep i)
            (make_chart_goto_10)
            (cond ((stringp (store (ar dispatch_array i) fun))
                   (insert fun current_buffer)
                   (insert " (Auto_Loaded)" current_buffer)
                   (cond ((gp make_chart_arg 3)
                          (insert 13 current_buffer))))
                  ((t)
                   (store (get_pname fun) string)
                   (cond ((and (eq (mod make_chart_arg 3) 1)
                               (eq string "illegal_command"))
                          (delete current_buffer
                                  (rsearchr current_buffer 13))
                          (goto NEXT))
                         ((and (eq (mod make_chart_arg 3) 2)
                               (eq string "illegal_command"))
                          (goto NEXT))
                         ((t)
                          (insert string current_buffer)
                          (cond ((gp make_chart_arg 3)
                                 (make_chart_insert_doc fun)))))))
NEXT        (insert 13 current_buffer)))

; we locally bind last_buffer_in so it doesn't upset what the user sees

(defun make_chart_insert_doc (fun &aux i last_buffer_in doc_filename doc_buf)
       (cond ((functionp (store (get_documentation fun) doc_filename))
              (insert " (Documentation Is A Function)" current_buffer)
              (insert 13 current_buffer))
             ((eq doc_filename 0)
NO_DOC        (insert " (No Documentation)" current_buffer)
              (insert 13 current_buffer)
              (return))
             ((t)
              (store "CHART" last_buffer_in)
              (find_file doc_filename)
              (store current_buffer doc_buf)
              (goto_buffer last_buffer_in)
              (cat_into tg 4 (get_pname fun) ":")
              (set_loc doc_buf 0)
              (store (iferror (search doc_buf tg) (goto NO_DOC)) i)
              (set_loc doc_buf i)
              (insert 13 current_buffer)
              (make_chart_goto_10)
              (insert_region doc_buf
                             (add i 1)
                             (iferror (sub (search doc_buf 4) 1)
                                      (length doc_buf))
                             current_buffer)
LOOP_FOR_CRS  (cond ((eq (nthr current_buffer -1) 13)
                     (delete current_buffer -1)
                     (goto LOOP_FOR_CRS)))
              (insert 13 current_buffer))))

(defun make_chart_rep (char)
       (cond ((eq char 27) (insert "Alt" current_buffer))
             ((lp char 32)
              (insert "C-" current_buffer)
              (insert (add char 64) current_buffer))
             ((eq char 32) (insert "Space" current_buffer))
             ((eq char 127) (insert "Del" current_buffer))
             ((t) (insert char current_buffer))))

(defun make_chart_goto_10 (&aux i)
       (for i 
            (get_hpos current_buffer (location current_buffer))
            10
            (insert 32 current_buffer)))
^L